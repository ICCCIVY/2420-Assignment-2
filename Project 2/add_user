#!/bin/bash

# Check for root privileges to run the script.  
if [[ $EUID -ne 0 ]]; then
    echo "Please run this script as a root user."
    exit 1
fi

# Implement a usuage function to display usage instructions
usage() {
    echo "Usage: $0 [-u] [-s] [-h] [-g group1 group2...]" 
    echo "  -u    Specify the username for the new user."
    echo "  -s    Specify the shell (e.g., /bin/bash, /bin/zsh)."
    echo "  -h    Specify the home directory for the new user."
    echo "  -g    Specify additional groups for the new user."
    exit 1
}

while getopts "u:s:h:g:" opt; do # all options requre an argument 
    case ${opt} in
        u) 
        username="${OPTARG}" 
        ;;
        s) 
        shell="${OPTARG}" 
        ;;
        h)
        home_dir="${OPTARG}"
        ;;
        g) 
        groups="${OPTARG}" 
        ;;
        *) 
        usage 
        ;;
    esac
done


# Use an if statement to check if the username is provided, if not, print an error message and calls the usage function to display the correct usage.
if [[ -z $username ]]; then
  echo "Error: Username is required."
  usage
fi

# To avoid duplicate usernames, we need to check if the user already exists
# Use grep to search for the username in /etc/passwd file. 
if grep -q "^$username:" /etc/passwd; then
    echo "Error: User '$username' already exists." 
    exit 1
fi

# Use an if statement to check if the shell is provided, if not, print an error message and calls the usage function to display the correct usage.
if [[ -z $shell ]]; then
  echo "Error: Shell is required."
  usage
fi

# define a varible home_dir for home directory if the directory is unset
if [[ -z $home_dir ]]; then
  home_dir="/home/$username"
fi

# Generate uid and gid for the new user
# Use cut to extract the third field from /etc/passwd, which is uid. Sort the output numerically, and get the last line to get the highest uid.
uid=$(cut -d: -f3 /etc/passwd | sort -n | tail -n 1)
# Increment the uid by 1 to get a unique uid for the new user
uid=$((uid + 1))
gid=$uid

# Create a unique primary group for the new user, usually the same as the username
if ! grep -q "^$username:" /etc/group; then 
# Use grep to search the /etc/group file to see if a group name same as the username already exists. ^ is used to match the start of the line.
    echo "$username:x:$gid:" >> /etc/group 
    # print the group name, x is place holder for group password and GID.
    echo "Primary group '$username' created."
fi



# appened the user entry to /etc/passwd
echo "$username:x:$uid:$gid::$home_dir:$shell" >> /etc/passwd
echo "User '$username' added to /etc/passwd."

# Create a directory for the new user and 
# Copy the contents of /etc/skel to the new user's home directory
mkdir -p "$home_dir"
cp -r /etc/skel/. "$home_dir/"


# Use passwd utility to set password for the new user
passwd "$username"
echo "Password has been set for $username."


# If additional groups are provided, process and add the user to them
if [[ -n $groups ]]; then # Check if the groups variable is not empty
    for group in $groups; do # Now we can loop through the group array that we created
        # Check if the group exists in /etc/group
        if grep -q "^$group:" /etc/group; then # if the group exists in /etc/group file
            sed -i "/^$group:/ s/$/,$username/" /etc/group # Add the user to the existing group
        else
            # Create a new group with an incremented GID
            new_gid=$(( $(cut -d: -f3 /etc/group | sort -n | tail -n 1) + 1 ))
            echo "$group:x:$new_gid:$username" >> /etc/group
        fi
        echo "User '$username' added to group '$group'."
    done
fi
